from Tkinter import *
import time
from random import uniform
from math import sin, cos, atan, pi, sqrt

WIDTH = 1920
HEIGHT = 960

tk = Tk()
tk.title("Boid Simulation")
canvas = Canvas(tk, width=WIDTH, height=HEIGHT,
                bg="grey", cursor="fleur")

cohesion_switch=1
separation_switch=1
alignment_switch=1

def toggle_c():
    global cohesion_switch
    cohesion_switch ^= 1
    if cohesion_switch:
        tk.cohesion_button["text"]="On"
    else:
        tk.cohesion_button["text"]="Off"

def toggle_s():
    global separation_switch
    separation_switch ^= 1
    if separation_switch:
        tk.separation_button["text"]="On"
    else:
        tk.separation_button["text"]="Off"

def toggle_a():
    global alignment_switch
    alignment_switch ^= 1
    if alignment_switch:
        tk.alignment_button["text"]="On"
    else:
        tk.alignment_button["text"]="Off"

Label(tk, text="Cohesion").grid(row=0, column=0)
tk.cohesion_button = Button(tk, text="On", command=toggle_c)
tk.cohesion_button.grid(row=0, column=1)

Label(tk, text="Separation").grid(row=1, column=0)
tk.separation_button = Button(tk, text="On", command=toggle_s)
tk.separation_button.grid(row=1, column=1)

Label(tk, text="Alignment").grid(row=2, column=0)
tk.alignment_button = Button(tk, text="On", command=toggle_a)
tk.alignment_button.grid(row=2, column=1)

SPEED = 0.4

BOID_RADIUS = 5
COHESE_RADIUS = 60
CROWD_RADIUS = 40
SEPARATE_RADIUS = 90

boids=[]
N = 0

def addBoid(x, y):
    global N
    boids.append((x, y, uniform(0, 2*pi)))
    N += 1

def dist(a, b, c, d):
    return sqrt((a-b)**2+(c-d)**2)

def findNeighbors(n):
    global N
    ret=[]

    x, y, _ = boids[n]
    for i in xrange(N):
        if i==n:
            continue
        _x, _y, u = boids[i]
        if dist(x, _x, y, _y)<=COHESE_RADIUS:
            ret.append(i)
    return ret

def boid_update(i, _theta): x, y, theta = boids[i]
    theta = _theta
    x = (x+SPEED*cos(theta))%WIDTH
    y = (y+SPEED*sin(theta))%HEIGHT
    boids[i] = (x, y, theta)

def draw():
    global N
    canvas.delete("all")
    for i in xrange(N):
        x, y, theta = boids[i]
        canvas.create_oval(x-BOID_RADIUS,
                           y-BOID_RADIUS,
                           x+BOID_RADIUS,
                           y+BOID_RADIUS,
                           fill="black")

def direction(i, x, y):
    _x, _y, _ = boids[i]
    if x==_x:
        return (0.5+(_y>y))*pi

    ret = atan((y-_y)/(x-_x))
    if ret>0:
        ret += (_x>x)*pi
    else:
        ret += (1+(_y<y))*pi

    return ret

def cohesion(i, neighbors):
    goalx, goaly=0.0, 0.0
    l=len(neighbors)

    if l==0:
        _, _u, theta = boids[i]
        return theta

    for n in neighbors:
        x, y, _ = boids[n]
        goalx += x
        goaly += y

    return direction(i, goalx/l, goaly/l)

def separation(i, neighbors):
    goalx, goaly=0.0, 0.0
    l=len(neighbors)

    _x, _y, theta = boids[i]

    if l==0:
        return theta

    theta = 0
    for n in neighbors:
        x, y, _ = boids[n]
        goalx = (_x-x)
        goaly = (_y-y)
        theta += direction(i, goalx, goaly)

    return theta/l

def alignment(i, neighbors):
    goalx, goaly = 0, 0
    l=len(neighbors)

    if l==0:
        return goalx, goaly
    for n in neighbors:
        x, y, theta = boids[n]
        ret += theta

    return ret/l

def run():
    global N
    theta=[0]*N
    for i in xrange(N):
        neigh = findNeighbors(i)
        theta1=theta2=theta3=0

        if cohesion_switch:
            theta1 = cohesion(i, neigh)
        if separation_switch:
            theta2 = separation(i, neigh)
        if alignment_switch:
            theta3 = alignment(i, neigh)

        theta[i]=(theta1 +theta2 +theta3)/3.0

    for i in xrange(N):
        boid_update(i, theta[i])

    draw()
    canvas.after(1, run)

def callback(event):
    addBoid(event.x, event.y)

canvas.grid(row=3, column=3)
canvas.bind("<Button-1>", callback)

run()
tk.mainloop()
